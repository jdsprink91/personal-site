---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<style>
  form > * + * {
    margin-top: 1rem;
  }

  label {
    display: block;
  }

  label + * {
    margin-top: 0.5rem;
  }

  input,
  textarea {
    width: 100%;
  }

  textarea {
    height: 5rem;
    max-width: 100%;
  }

  @media screen and (max-width: 30rem) {
    button {
      width: 100%;
      justify-content: center;
    }
  }
</style>

<BaseLayout pageTitle="Contact" headingCopy="Contact">
  <form
    name="contact"
    method="post"
    data-netlify="true"
    action="/success"
    novalidate="true"
  >
    <div>
      <label for="name">Your Name:</label>
      <input
        id="name"
        type="text"
        name="name"
        placeholder="Name"
        required
        data-value-missing-msg="Tell me your name!"
      />
    </div>
    <div>
      <label for="email">Your Email:</label>
      <input
        id="email"
        type="email"
        name="email"
        placeholder="Email"
        required
        data-value-missing-msg="HEY! What's your email??"
      />
    </div>
    <div>
      <label for="message">Your Message:</label>
      <textarea
        name="message"
        id="message"
        placeholder="Write me a message"
        required
        data-value-missing-msg="You're not gonna write me nothin?"></textarea>
    </div>
    <button type="submit">Submit</button>
  </form>
</BaseLayout>

<script>
  const inputElms = document.querySelectorAll<
    HTMLInputElement | HTMLTextAreaElement
  >("input,textarea");

  const showErrorIfNeedBe = (elm: HTMLInputElement | HTMLTextAreaElement) => {
    if (!elm.validity.valid) {
      elm.classList.add("invalid");

      if (elm.validity.valueMissing) {
        const p = document.createElement("p");
        p.innerText = elm.dataset.valueMissingMsg!;
        // need to check to make sure that the error message isn't already there
        elm.after(p);
      }
    }
  };

  const removeErrorIfNeedBe = (elm: HTMLInputElement | HTMLTextAreaElement) => {
    if (elm.validity.valid) {
      elm.classList.remove("invalid");
    }
  };

  document
    .querySelector<HTMLFormElement>("form")
    ?.addEventListener("submit", (event) => {
      if (
        !event.currentTarget ||
        !(event.currentTarget instanceof HTMLFormElement) ||
        !event.currentTarget.checkValidity()
      ) {
        // show the errors if need be, then prevent the form from submitting
        inputElms.forEach((node) => {
          showErrorIfNeedBe(node);
        });
        event.preventDefault();
        return;
      }
    });

  inputElms.forEach((node) => {
    node.addEventListener("blur", (event) => {
      if (
        event.target instanceof HTMLInputElement ||
        event.target instanceof HTMLTextAreaElement
      ) {
        showErrorIfNeedBe(event.target);
      }
    });

    node.addEventListener("input", (event) => {
      if (
        event.target instanceof HTMLInputElement ||
        event.target instanceof HTMLTextAreaElement
      ) {
        removeErrorIfNeedBe(event.target);
      }
    });
  });
</script>
